// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client2Server.proto

#include "Client2Server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Client2Server {
PROTOBUF_CONSTEXPR CSRequest::CSRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latitude_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.longitude_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRequestDefaultTypeInternal() {}
  union {
    CSRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRequestDefaultTypeInternal _CSRequest_default_instance_;
PROTOBUF_CONSTEXPR CSReply::CSReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rand_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReplyDefaultTypeInternal() {}
  union {
    CSReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReplyDefaultTypeInternal _CSReply_default_instance_;
}  // namespace Client2Server
static ::_pb::Metadata file_level_metadata_Client2Server_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Client2Server_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Client2Server_2eproto = nullptr;

const uint32_t TableStruct_Client2Server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Client2Server::CSRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Client2Server::CSRequest, _impl_.pk_),
  PROTOBUF_FIELD_OFFSET(::Client2Server::CSRequest, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::Client2Server::CSRequest, _impl_.longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Client2Server::CSReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Client2Server::CSReply, _impl_.rand_),
  PROTOBUF_FIELD_OFFSET(::Client2Server::CSReply, _impl_.time_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Client2Server::CSRequest)},
  { 9, -1, -1, sizeof(::Client2Server::CSReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Client2Server::_CSRequest_default_instance_._instance,
  &::Client2Server::_CSReply_default_instance_._instance,
};

const char descriptor_table_protodef_Client2Server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023Client2Server.proto\022\rClient2Server\"<\n\t"
  "CSRequest\022\n\n\002pk\030\001 \001(\t\022\020\n\010latitude\030\002 \001(\t\022"
  "\021\n\tlongitude\030\003 \001(\t\"%\n\007CSReply\022\014\n\004rand\030\001 "
  "\001(\t\022\014\n\004time\030\002 \001(\t2R\n\tCSGreeter\022E\n\017CSComm"
  "unication\022\030.Client2Server.CSRequest\032\026.Cl"
  "ient2Server.CSReply\"\000B3\n\026io.zklbs.Client"
  "2ServerB\022Client2ServerProtoP\001\242\002\002CSb\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_Client2Server_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Client2Server_2eproto = {
    false, false, 282, descriptor_table_protodef_Client2Server_2eproto,
    "Client2Server.proto",
    &descriptor_table_Client2Server_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_Client2Server_2eproto::offsets,
    file_level_metadata_Client2Server_2eproto, file_level_enum_descriptors_Client2Server_2eproto,
    file_level_service_descriptors_Client2Server_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Client2Server_2eproto_getter() {
  return &descriptor_table_Client2Server_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Client2Server_2eproto(&descriptor_table_Client2Server_2eproto);
namespace Client2Server {

// ===================================================================

class CSRequest::_Internal {
 public:
};

CSRequest::CSRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Client2Server.CSRequest)
}
CSRequest::CSRequest(const CSRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pk_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pk().empty()) {
    _this->_impl_.pk_.Set(from._internal_pk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.latitude_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.latitude_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_latitude().empty()) {
    _this->_impl_.latitude_.Set(from._internal_latitude(), 
      _this->GetArenaForAllocation());
  }
  _impl_.longitude_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.longitude_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_longitude().empty()) {
    _this->_impl_.longitude_.Set(from._internal_longitude(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Client2Server.CSRequest)
}

inline void CSRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pk_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.latitude_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.latitude_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.longitude_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.longitude_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSRequest::~CSRequest() {
  // @@protoc_insertion_point(destructor:Client2Server.CSRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pk_.Destroy();
  _impl_.latitude_.Destroy();
  _impl_.longitude_.Destroy();
}

void CSRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Client2Server.CSRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pk_.ClearToEmpty();
  _impl_.latitude_.ClearToEmpty();
  _impl_.longitude_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Client2Server.CSRequest.pk"));
        } else
          goto handle_unusual;
        continue;
      // string latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_latitude();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Client2Server.CSRequest.latitude"));
        } else
          goto handle_unusual;
        continue;
      // string longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_longitude();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Client2Server.CSRequest.longitude"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Client2Server.CSRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pk = 1;
  if (!this->_internal_pk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pk().data(), static_cast<int>(this->_internal_pk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Server.CSRequest.pk");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pk(), target);
  }

  // string latitude = 2;
  if (!this->_internal_latitude().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latitude().data(), static_cast<int>(this->_internal_latitude().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Server.CSRequest.latitude");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_latitude(), target);
  }

  // string longitude = 3;
  if (!this->_internal_longitude().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_longitude().data(), static_cast<int>(this->_internal_longitude().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Server.CSRequest.longitude");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Client2Server.CSRequest)
  return target;
}

size_t CSRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Client2Server.CSRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pk = 1;
  if (!this->_internal_pk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pk());
  }

  // string latitude = 2;
  if (!this->_internal_latitude().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latitude());
  }

  // string longitude = 3;
  if (!this->_internal_longitude().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_longitude());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRequest::GetClassData() const { return &_class_data_; }


void CSRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRequest*>(&to_msg);
  auto& from = static_cast<const CSRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Client2Server.CSRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pk().empty()) {
    _this->_internal_set_pk(from._internal_pk());
  }
  if (!from._internal_latitude().empty()) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  if (!from._internal_longitude().empty()) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRequest::CopyFrom(const CSRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Client2Server.CSRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRequest::IsInitialized() const {
  return true;
}

void CSRequest::InternalSwap(CSRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pk_, lhs_arena,
      &other->_impl_.pk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.latitude_, lhs_arena,
      &other->_impl_.latitude_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.longitude_, lhs_arena,
      &other->_impl_.longitude_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Client2Server_2eproto_getter, &descriptor_table_Client2Server_2eproto_once,
      file_level_metadata_Client2Server_2eproto[0]);
}

// ===================================================================

class CSReply::_Internal {
 public:
};

CSReply::CSReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Client2Server.CSReply)
}
CSReply::CSReply(const CSReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rand_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rand_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rand_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rand().empty()) {
    _this->_impl_.rand_.Set(from._internal_rand(), 
      _this->GetArenaForAllocation());
  }
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time().empty()) {
    _this->_impl_.time_.Set(from._internal_time(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Client2Server.CSReply)
}

inline void CSReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rand_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rand_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rand_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSReply::~CSReply() {
  // @@protoc_insertion_point(destructor:Client2Server.CSReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rand_.Destroy();
  _impl_.time_.Destroy();
}

void CSReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Client2Server.CSReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rand_.ClearToEmpty();
  _impl_.time_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rand();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Client2Server.CSReply.rand"));
        } else
          goto handle_unusual;
        continue;
      // string time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Client2Server.CSReply.time"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Client2Server.CSReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rand = 1;
  if (!this->_internal_rand().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rand().data(), static_cast<int>(this->_internal_rand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Server.CSReply.rand");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rand(), target);
  }

  // string time = 2;
  if (!this->_internal_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Server.CSReply.time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Client2Server.CSReply)
  return target;
}

size_t CSReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Client2Server.CSReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rand = 1;
  if (!this->_internal_rand().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rand());
  }

  // string time = 2;
  if (!this->_internal_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReply::GetClassData() const { return &_class_data_; }


void CSReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReply*>(&to_msg);
  auto& from = static_cast<const CSReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Client2Server.CSReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rand().empty()) {
    _this->_internal_set_rand(from._internal_rand());
  }
  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReply::CopyFrom(const CSReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Client2Server.CSReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReply::IsInitialized() const {
  return true;
}

void CSReply::InternalSwap(CSReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rand_, lhs_arena,
      &other->_impl_.rand_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_, lhs_arena,
      &other->_impl_.time_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Client2Server_2eproto_getter, &descriptor_table_Client2Server_2eproto_once,
      file_level_metadata_Client2Server_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Client2Server
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Client2Server::CSRequest*
Arena::CreateMaybeMessage< ::Client2Server::CSRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Client2Server::CSRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Client2Server::CSReply*
Arena::CreateMaybeMessage< ::Client2Server::CSReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Client2Server::CSReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

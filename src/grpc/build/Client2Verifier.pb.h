// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client2Verifier.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client2Verifier_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Client2Verifier_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Client2Verifier_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Client2Verifier_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client2Verifier_2eproto;
namespace Client2Verifier {
class CVReply;
struct CVReplyDefaultTypeInternal;
extern CVReplyDefaultTypeInternal _CVReply_default_instance_;
class CVRequest;
struct CVRequestDefaultTypeInternal;
extern CVRequestDefaultTypeInternal _CVRequest_default_instance_;
}  // namespace Client2Verifier
PROTOBUF_NAMESPACE_OPEN
template<> ::Client2Verifier::CVReply* Arena::CreateMaybeMessage<::Client2Verifier::CVReply>(Arena*);
template<> ::Client2Verifier::CVRequest* Arena::CreateMaybeMessage<::Client2Verifier::CVRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Client2Verifier {

// ===================================================================

class CVRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Client2Verifier.CVRequest) */ {
 public:
  inline CVRequest() : CVRequest(nullptr) {}
  ~CVRequest() override;
  explicit PROTOBUF_CONSTEXPR CVRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVRequest(const CVRequest& from);
  CVRequest(CVRequest&& from) noexcept
    : CVRequest() {
    *this = ::std::move(from);
  }

  inline CVRequest& operator=(const CVRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVRequest& operator=(CVRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVRequest* internal_default_instance() {
    return reinterpret_cast<const CVRequest*>(
               &_CVRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CVRequest& a, CVRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CVRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CVRequest& from) {
    CVRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Client2Verifier.CVRequest";
  }
  protected:
  explicit CVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVkFieldNumber = 1,
    kProofFieldNumber = 2,
    kRandVkFieldNumber = 3,
    kRandProofFieldNumber = 4,
  };
  // string vk = 1;
  void clear_vk();
  const std::string& vk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vk();
  PROTOBUF_NODISCARD std::string* release_vk();
  void set_allocated_vk(std::string* vk);
  private:
  const std::string& _internal_vk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vk(const std::string& value);
  std::string* _internal_mutable_vk();
  public:

  // string proof = 2;
  void clear_proof();
  const std::string& proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* proof);
  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(const std::string& value);
  std::string* _internal_mutable_proof();
  public:

  // string randVk = 3;
  void clear_randvk();
  const std::string& randvk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_randvk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_randvk();
  PROTOBUF_NODISCARD std::string* release_randvk();
  void set_allocated_randvk(std::string* randvk);
  private:
  const std::string& _internal_randvk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_randvk(const std::string& value);
  std::string* _internal_mutable_randvk();
  public:

  // string randProof = 4;
  void clear_randproof();
  const std::string& randproof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_randproof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_randproof();
  PROTOBUF_NODISCARD std::string* release_randproof();
  void set_allocated_randproof(std::string* randproof);
  private:
  const std::string& _internal_randproof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_randproof(const std::string& value);
  std::string* _internal_mutable_randproof();
  public:

  // @@protoc_insertion_point(class_scope:Client2Verifier.CVRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vk_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randvk_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randproof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client2Verifier_2eproto;
};
// -------------------------------------------------------------------

class CVReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Client2Verifier.CVReply) */ {
 public:
  inline CVReply() : CVReply(nullptr) {}
  ~CVReply() override;
  explicit PROTOBUF_CONSTEXPR CVReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVReply(const CVReply& from);
  CVReply(CVReply&& from) noexcept
    : CVReply() {
    *this = ::std::move(from);
  }

  inline CVReply& operator=(const CVReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVReply& operator=(CVReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVReply* internal_default_instance() {
    return reinterpret_cast<const CVReply*>(
               &_CVReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CVReply& a, CVReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CVReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CVReply& from) {
    CVReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Client2Verifier.CVReply";
  }
  protected:
  explicit CVReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
  };
  // string answer = 1;
  void clear_answer();
  const std::string& answer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // @@protoc_insertion_point(class_scope:Client2Verifier.CVReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client2Verifier_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CVRequest

// string vk = 1;
inline void CVRequest::clear_vk() {
  _impl_.vk_.ClearToEmpty();
}
inline const std::string& CVRequest::vk() const {
  // @@protoc_insertion_point(field_get:Client2Verifier.CVRequest.vk)
  return _internal_vk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVRequest::set_vk(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vk_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client2Verifier.CVRequest.vk)
}
inline std::string* CVRequest::mutable_vk() {
  std::string* _s = _internal_mutable_vk();
  // @@protoc_insertion_point(field_mutable:Client2Verifier.CVRequest.vk)
  return _s;
}
inline const std::string& CVRequest::_internal_vk() const {
  return _impl_.vk_.Get();
}
inline void CVRequest::_internal_set_vk(const std::string& value) {
  
  _impl_.vk_.Set(value, GetArenaForAllocation());
}
inline std::string* CVRequest::_internal_mutable_vk() {
  
  return _impl_.vk_.Mutable(GetArenaForAllocation());
}
inline std::string* CVRequest::release_vk() {
  // @@protoc_insertion_point(field_release:Client2Verifier.CVRequest.vk)
  return _impl_.vk_.Release();
}
inline void CVRequest::set_allocated_vk(std::string* vk) {
  if (vk != nullptr) {
    
  } else {
    
  }
  _impl_.vk_.SetAllocated(vk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vk_.IsDefault()) {
    _impl_.vk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client2Verifier.CVRequest.vk)
}

// string proof = 2;
inline void CVRequest::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& CVRequest::proof() const {
  // @@protoc_insertion_point(field_get:Client2Verifier.CVRequest.proof)
  return _internal_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVRequest::set_proof(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proof_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client2Verifier.CVRequest.proof)
}
inline std::string* CVRequest::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:Client2Verifier.CVRequest.proof)
  return _s;
}
inline const std::string& CVRequest::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void CVRequest::_internal_set_proof(const std::string& value) {
  
  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* CVRequest::_internal_mutable_proof() {
  
  return _impl_.proof_.Mutable(GetArenaForAllocation());
}
inline std::string* CVRequest::release_proof() {
  // @@protoc_insertion_point(field_release:Client2Verifier.CVRequest.proof)
  return _impl_.proof_.Release();
}
inline void CVRequest::set_allocated_proof(std::string* proof) {
  if (proof != nullptr) {
    
  } else {
    
  }
  _impl_.proof_.SetAllocated(proof, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proof_.IsDefault()) {
    _impl_.proof_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client2Verifier.CVRequest.proof)
}

// string randVk = 3;
inline void CVRequest::clear_randvk() {
  _impl_.randvk_.ClearToEmpty();
}
inline const std::string& CVRequest::randvk() const {
  // @@protoc_insertion_point(field_get:Client2Verifier.CVRequest.randVk)
  return _internal_randvk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVRequest::set_randvk(ArgT0&& arg0, ArgT... args) {
 
 _impl_.randvk_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client2Verifier.CVRequest.randVk)
}
inline std::string* CVRequest::mutable_randvk() {
  std::string* _s = _internal_mutable_randvk();
  // @@protoc_insertion_point(field_mutable:Client2Verifier.CVRequest.randVk)
  return _s;
}
inline const std::string& CVRequest::_internal_randvk() const {
  return _impl_.randvk_.Get();
}
inline void CVRequest::_internal_set_randvk(const std::string& value) {
  
  _impl_.randvk_.Set(value, GetArenaForAllocation());
}
inline std::string* CVRequest::_internal_mutable_randvk() {
  
  return _impl_.randvk_.Mutable(GetArenaForAllocation());
}
inline std::string* CVRequest::release_randvk() {
  // @@protoc_insertion_point(field_release:Client2Verifier.CVRequest.randVk)
  return _impl_.randvk_.Release();
}
inline void CVRequest::set_allocated_randvk(std::string* randvk) {
  if (randvk != nullptr) {
    
  } else {
    
  }
  _impl_.randvk_.SetAllocated(randvk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.randvk_.IsDefault()) {
    _impl_.randvk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client2Verifier.CVRequest.randVk)
}

// string randProof = 4;
inline void CVRequest::clear_randproof() {
  _impl_.randproof_.ClearToEmpty();
}
inline const std::string& CVRequest::randproof() const {
  // @@protoc_insertion_point(field_get:Client2Verifier.CVRequest.randProof)
  return _internal_randproof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVRequest::set_randproof(ArgT0&& arg0, ArgT... args) {
 
 _impl_.randproof_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client2Verifier.CVRequest.randProof)
}
inline std::string* CVRequest::mutable_randproof() {
  std::string* _s = _internal_mutable_randproof();
  // @@protoc_insertion_point(field_mutable:Client2Verifier.CVRequest.randProof)
  return _s;
}
inline const std::string& CVRequest::_internal_randproof() const {
  return _impl_.randproof_.Get();
}
inline void CVRequest::_internal_set_randproof(const std::string& value) {
  
  _impl_.randproof_.Set(value, GetArenaForAllocation());
}
inline std::string* CVRequest::_internal_mutable_randproof() {
  
  return _impl_.randproof_.Mutable(GetArenaForAllocation());
}
inline std::string* CVRequest::release_randproof() {
  // @@protoc_insertion_point(field_release:Client2Verifier.CVRequest.randProof)
  return _impl_.randproof_.Release();
}
inline void CVRequest::set_allocated_randproof(std::string* randproof) {
  if (randproof != nullptr) {
    
  } else {
    
  }
  _impl_.randproof_.SetAllocated(randproof, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.randproof_.IsDefault()) {
    _impl_.randproof_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client2Verifier.CVRequest.randProof)
}

// -------------------------------------------------------------------

// CVReply

// string answer = 1;
inline void CVReply::clear_answer() {
  _impl_.answer_.ClearToEmpty();
}
inline const std::string& CVReply::answer() const {
  // @@protoc_insertion_point(field_get:Client2Verifier.CVReply.answer)
  return _internal_answer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVReply::set_answer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.answer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client2Verifier.CVReply.answer)
}
inline std::string* CVReply::mutable_answer() {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:Client2Verifier.CVReply.answer)
  return _s;
}
inline const std::string& CVReply::_internal_answer() const {
  return _impl_.answer_.Get();
}
inline void CVReply::_internal_set_answer(const std::string& value) {
  
  _impl_.answer_.Set(value, GetArenaForAllocation());
}
inline std::string* CVReply::_internal_mutable_answer() {
  
  return _impl_.answer_.Mutable(GetArenaForAllocation());
}
inline std::string* CVReply::release_answer() {
  // @@protoc_insertion_point(field_release:Client2Verifier.CVReply.answer)
  return _impl_.answer_.Release();
}
inline void CVReply::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  _impl_.answer_.SetAllocated(answer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.answer_.IsDefault()) {
    _impl_.answer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client2Verifier.CVReply.answer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client2Verifier

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Client2Verifier_2eproto

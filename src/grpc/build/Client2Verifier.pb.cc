// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client2Verifier.proto

#include "Client2Verifier.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Client2Verifier {
PROTOBUF_CONSTEXPR CVRequest::CVRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proof_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.randvk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.randproof_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CVRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CVRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CVRequestDefaultTypeInternal() {}
  union {
    CVRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CVRequestDefaultTypeInternal _CVRequest_default_instance_;
PROTOBUF_CONSTEXPR CVReply::CVReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.answer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CVReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CVReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CVReplyDefaultTypeInternal() {}
  union {
    CVReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CVReplyDefaultTypeInternal _CVReply_default_instance_;
}  // namespace Client2Verifier
static ::_pb::Metadata file_level_metadata_Client2Verifier_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Client2Verifier_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Client2Verifier_2eproto = nullptr;

const uint32_t TableStruct_Client2Verifier_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Client2Verifier::CVRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Client2Verifier::CVRequest, _impl_.vk_),
  PROTOBUF_FIELD_OFFSET(::Client2Verifier::CVRequest, _impl_.proof_),
  PROTOBUF_FIELD_OFFSET(::Client2Verifier::CVRequest, _impl_.randvk_),
  PROTOBUF_FIELD_OFFSET(::Client2Verifier::CVRequest, _impl_.randproof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Client2Verifier::CVReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Client2Verifier::CVReply, _impl_.answer_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Client2Verifier::CVRequest)},
  { 10, -1, -1, sizeof(::Client2Verifier::CVReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Client2Verifier::_CVRequest_default_instance_._instance,
  &::Client2Verifier::_CVReply_default_instance_._instance,
};

const char descriptor_table_protodef_Client2Verifier_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025Client2Verifier.proto\022\017Client2Verifier"
  "\"I\n\tCVRequest\022\n\n\002vk\030\001 \001(\t\022\r\n\005proof\030\002 \001(\t"
  "\022\016\n\006randVk\030\003 \001(\t\022\021\n\trandProof\030\004 \001(\t\"\031\n\007C"
  "VReply\022\016\n\006answer\030\001 \001(\t2V\n\tCVGreeter\022I\n\017C"
  "VCommunication\022\032.Client2Verifier.CVReque"
  "st\032\030.Client2Verifier.CVReply\"\000B2\n\030io.zkl"
  "bs.Client2VerifierB\017Client2VerifierP\001\242\002\002"
  "CSb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Client2Verifier_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Client2Verifier_2eproto = {
    false, false, 290, descriptor_table_protodef_Client2Verifier_2eproto,
    "Client2Verifier.proto",
    &descriptor_table_Client2Verifier_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_Client2Verifier_2eproto::offsets,
    file_level_metadata_Client2Verifier_2eproto, file_level_enum_descriptors_Client2Verifier_2eproto,
    file_level_service_descriptors_Client2Verifier_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Client2Verifier_2eproto_getter() {
  return &descriptor_table_Client2Verifier_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Client2Verifier_2eproto(&descriptor_table_Client2Verifier_2eproto);
namespace Client2Verifier {

// ===================================================================

class CVRequest::_Internal {
 public:
};

CVRequest::CVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Client2Verifier.CVRequest)
}
CVRequest::CVRequest(const CVRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CVRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vk_){}
    , decltype(_impl_.proof_){}
    , decltype(_impl_.randvk_){}
    , decltype(_impl_.randproof_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vk().empty()) {
    _this->_impl_.vk_.Set(from._internal_vk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof().empty()) {
    _this->_impl_.proof_.Set(from._internal_proof(), 
      _this->GetArenaForAllocation());
  }
  _impl_.randvk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.randvk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_randvk().empty()) {
    _this->_impl_.randvk_.Set(from._internal_randvk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.randproof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.randproof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_randproof().empty()) {
    _this->_impl_.randproof_.Set(from._internal_randproof(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Client2Verifier.CVRequest)
}

inline void CVRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vk_){}
    , decltype(_impl_.proof_){}
    , decltype(_impl_.randvk_){}
    , decltype(_impl_.randproof_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.randvk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.randvk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.randproof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.randproof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CVRequest::~CVRequest() {
  // @@protoc_insertion_point(destructor:Client2Verifier.CVRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CVRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vk_.Destroy();
  _impl_.proof_.Destroy();
  _impl_.randvk_.Destroy();
  _impl_.randproof_.Destroy();
}

void CVRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CVRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Client2Verifier.CVRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vk_.ClearToEmpty();
  _impl_.proof_.ClearToEmpty();
  _impl_.randvk_.ClearToEmpty();
  _impl_.randproof_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Client2Verifier.CVRequest.vk"));
        } else
          goto handle_unusual;
        continue;
      // string proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Client2Verifier.CVRequest.proof"));
        } else
          goto handle_unusual;
        continue;
      // string randVk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_randvk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Client2Verifier.CVRequest.randVk"));
        } else
          goto handle_unusual;
        continue;
      // string randProof = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_randproof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Client2Verifier.CVRequest.randProof"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Client2Verifier.CVRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vk = 1;
  if (!this->_internal_vk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vk().data(), static_cast<int>(this->_internal_vk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Verifier.CVRequest.vk");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vk(), target);
  }

  // string proof = 2;
  if (!this->_internal_proof().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proof().data(), static_cast<int>(this->_internal_proof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Verifier.CVRequest.proof");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proof(), target);
  }

  // string randVk = 3;
  if (!this->_internal_randvk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_randvk().data(), static_cast<int>(this->_internal_randvk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Verifier.CVRequest.randVk");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_randvk(), target);
  }

  // string randProof = 4;
  if (!this->_internal_randproof().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_randproof().data(), static_cast<int>(this->_internal_randproof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Verifier.CVRequest.randProof");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_randproof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Client2Verifier.CVRequest)
  return target;
}

size_t CVRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Client2Verifier.CVRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vk = 1;
  if (!this->_internal_vk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vk());
  }

  // string proof = 2;
  if (!this->_internal_proof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proof());
  }

  // string randVk = 3;
  if (!this->_internal_randvk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randvk());
  }

  // string randProof = 4;
  if (!this->_internal_randproof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randproof());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CVRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVRequest::GetClassData() const { return &_class_data_; }


void CVRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CVRequest*>(&to_msg);
  auto& from = static_cast<const CVRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Client2Verifier.CVRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vk().empty()) {
    _this->_internal_set_vk(from._internal_vk());
  }
  if (!from._internal_proof().empty()) {
    _this->_internal_set_proof(from._internal_proof());
  }
  if (!from._internal_randvk().empty()) {
    _this->_internal_set_randvk(from._internal_randvk());
  }
  if (!from._internal_randproof().empty()) {
    _this->_internal_set_randproof(from._internal_randproof());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVRequest::CopyFrom(const CVRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Client2Verifier.CVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVRequest::IsInitialized() const {
  return true;
}

void CVRequest::InternalSwap(CVRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vk_, lhs_arena,
      &other->_impl_.vk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proof_, lhs_arena,
      &other->_impl_.proof_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.randvk_, lhs_arena,
      &other->_impl_.randvk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.randproof_, lhs_arena,
      &other->_impl_.randproof_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CVRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Client2Verifier_2eproto_getter, &descriptor_table_Client2Verifier_2eproto_once,
      file_level_metadata_Client2Verifier_2eproto[0]);
}

// ===================================================================

class CVReply::_Internal {
 public:
};

CVReply::CVReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Client2Verifier.CVReply)
}
CVReply::CVReply(const CVReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CVReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.answer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.answer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_answer().empty()) {
    _this->_impl_.answer_.Set(from._internal_answer(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Client2Verifier.CVReply)
}

inline void CVReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.answer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.answer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CVReply::~CVReply() {
  // @@protoc_insertion_point(destructor:Client2Verifier.CVReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CVReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.answer_.Destroy();
}

void CVReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CVReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Client2Verifier.CVReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.answer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_answer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Client2Verifier.CVReply.answer"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Client2Verifier.CVReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string answer = 1;
  if (!this->_internal_answer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_answer().data(), static_cast<int>(this->_internal_answer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Client2Verifier.CVReply.answer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Client2Verifier.CVReply)
  return target;
}

size_t CVReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Client2Verifier.CVReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string answer = 1;
  if (!this->_internal_answer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_answer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CVReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVReply::GetClassData() const { return &_class_data_; }


void CVReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CVReply*>(&to_msg);
  auto& from = static_cast<const CVReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Client2Verifier.CVReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_answer().empty()) {
    _this->_internal_set_answer(from._internal_answer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVReply::CopyFrom(const CVReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Client2Verifier.CVReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVReply::IsInitialized() const {
  return true;
}

void CVReply::InternalSwap(CVReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.answer_, lhs_arena,
      &other->_impl_.answer_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CVReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Client2Verifier_2eproto_getter, &descriptor_table_Client2Verifier_2eproto_once,
      file_level_metadata_Client2Verifier_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Client2Verifier
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Client2Verifier::CVRequest*
Arena::CreateMaybeMessage< ::Client2Verifier::CVRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Client2Verifier::CVRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Client2Verifier::CVReply*
Arena::CreateMaybeMessage< ::Client2Verifier::CVReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Client2Verifier::CVReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

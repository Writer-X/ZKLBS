// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server2Verifier.proto

#include "Server2Verifier.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Server2Verifier {
PROTOBUF_CONSTEXPR SVRequest::SVRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.h_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.randh_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SVRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SVRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SVRequestDefaultTypeInternal() {}
  union {
    SVRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SVRequestDefaultTypeInternal _SVRequest_default_instance_;
PROTOBUF_CONSTEXPR SVReply::SVReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SVReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SVReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SVReplyDefaultTypeInternal() {}
  union {
    SVReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SVReplyDefaultTypeInternal _SVReply_default_instance_;
}  // namespace Server2Verifier
static ::_pb::Metadata file_level_metadata_Server2Verifier_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Server2Verifier_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Server2Verifier_2eproto = nullptr;

const uint32_t TableStruct_Server2Verifier_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Server2Verifier::SVRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Server2Verifier::SVRequest, _impl_.h_),
  PROTOBUF_FIELD_OFFSET(::Server2Verifier::SVRequest, _impl_.randh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Server2Verifier::SVReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Server2Verifier::SVReply, _impl_.message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Server2Verifier::SVRequest)},
  { 8, -1, -1, sizeof(::Server2Verifier::SVReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Server2Verifier::_SVRequest_default_instance_._instance,
  &::Server2Verifier::_SVReply_default_instance_._instance,
};

const char descriptor_table_protodef_Server2Verifier_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025Server2Verifier.proto\022\017Server2Verifier"
  "\"%\n\tSVRequest\022\t\n\001h\030\001 \001(\t\022\r\n\005randh\030\002 \001(\t\""
  "\032\n\007SVReply\022\017\n\007message\030\001 \001(\t2V\n\tSVGreeter"
  "\022I\n\017SVCommunication\022\032.Server2Verifier.SV"
  "Request\032\030.Server2Verifier.SVReply\"\000B7\n\030i"
  "o.zklbs.Server2VerifierB\024Server2Verifier"
  "ProtoP\001\242\002\002SVb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Server2Verifier_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Server2Verifier_2eproto = {
    false, false, 260, descriptor_table_protodef_Server2Verifier_2eproto,
    "Server2Verifier.proto",
    &descriptor_table_Server2Verifier_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_Server2Verifier_2eproto::offsets,
    file_level_metadata_Server2Verifier_2eproto, file_level_enum_descriptors_Server2Verifier_2eproto,
    file_level_service_descriptors_Server2Verifier_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Server2Verifier_2eproto_getter() {
  return &descriptor_table_Server2Verifier_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Server2Verifier_2eproto(&descriptor_table_Server2Verifier_2eproto);
namespace Server2Verifier {

// ===================================================================

class SVRequest::_Internal {
 public:
};

SVRequest::SVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Server2Verifier.SVRequest)
}
SVRequest::SVRequest(const SVRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SVRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.h_){}
    , decltype(_impl_.randh_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.h_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.h_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_h().empty()) {
    _this->_impl_.h_.Set(from._internal_h(), 
      _this->GetArenaForAllocation());
  }
  _impl_.randh_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.randh_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_randh().empty()) {
    _this->_impl_.randh_.Set(from._internal_randh(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Server2Verifier.SVRequest)
}

inline void SVRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.h_){}
    , decltype(_impl_.randh_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.h_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.h_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.randh_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.randh_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SVRequest::~SVRequest() {
  // @@protoc_insertion_point(destructor:Server2Verifier.SVRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SVRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.h_.Destroy();
  _impl_.randh_.Destroy();
}

void SVRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SVRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Server2Verifier.SVRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.h_.ClearToEmpty();
  _impl_.randh_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SVRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string h = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_h();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Server2Verifier.SVRequest.h"));
        } else
          goto handle_unusual;
        continue;
      // string randh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_randh();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Server2Verifier.SVRequest.randh"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SVRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Server2Verifier.SVRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string h = 1;
  if (!this->_internal_h().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h().data(), static_cast<int>(this->_internal_h().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Server2Verifier.SVRequest.h");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_h(), target);
  }

  // string randh = 2;
  if (!this->_internal_randh().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_randh().data(), static_cast<int>(this->_internal_randh().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Server2Verifier.SVRequest.randh");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_randh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Server2Verifier.SVRequest)
  return target;
}

size_t SVRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Server2Verifier.SVRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string h = 1;
  if (!this->_internal_h().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h());
  }

  // string randh = 2;
  if (!this->_internal_randh().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randh());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SVRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SVRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SVRequest::GetClassData() const { return &_class_data_; }


void SVRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SVRequest*>(&to_msg);
  auto& from = static_cast<const SVRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Server2Verifier.SVRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_h().empty()) {
    _this->_internal_set_h(from._internal_h());
  }
  if (!from._internal_randh().empty()) {
    _this->_internal_set_randh(from._internal_randh());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SVRequest::CopyFrom(const SVRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Server2Verifier.SVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SVRequest::IsInitialized() const {
  return true;
}

void SVRequest::InternalSwap(SVRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.h_, lhs_arena,
      &other->_impl_.h_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.randh_, lhs_arena,
      &other->_impl_.randh_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SVRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server2Verifier_2eproto_getter, &descriptor_table_Server2Verifier_2eproto_once,
      file_level_metadata_Server2Verifier_2eproto[0]);
}

// ===================================================================

class SVReply::_Internal {
 public:
};

SVReply::SVReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Server2Verifier.SVReply)
}
SVReply::SVReply(const SVReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SVReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Server2Verifier.SVReply)
}

inline void SVReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SVReply::~SVReply() {
  // @@protoc_insertion_point(destructor:Server2Verifier.SVReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SVReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void SVReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SVReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Server2Verifier.SVReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SVReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Server2Verifier.SVReply.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SVReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Server2Verifier.SVReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Server2Verifier.SVReply.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Server2Verifier.SVReply)
  return target;
}

size_t SVReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Server2Verifier.SVReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SVReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SVReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SVReply::GetClassData() const { return &_class_data_; }


void SVReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SVReply*>(&to_msg);
  auto& from = static_cast<const SVReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Server2Verifier.SVReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SVReply::CopyFrom(const SVReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Server2Verifier.SVReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SVReply::IsInitialized() const {
  return true;
}

void SVReply::InternalSwap(SVReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SVReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Server2Verifier_2eproto_getter, &descriptor_table_Server2Verifier_2eproto_once,
      file_level_metadata_Server2Verifier_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Server2Verifier
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Server2Verifier::SVRequest*
Arena::CreateMaybeMessage< ::Server2Verifier::SVRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Server2Verifier::SVRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Server2Verifier::SVReply*
Arena::CreateMaybeMessage< ::Server2Verifier::SVReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Server2Verifier::SVReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

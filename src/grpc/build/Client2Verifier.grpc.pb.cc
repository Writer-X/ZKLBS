// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Client2Verifier.proto

#include "Client2Verifier.pb.h"
#include "Client2Verifier.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Client2Verifier {

static const char* CVGreeter_method_names[] = {
  "/Client2Verifier.CVGreeter/CVCommunication",
};

std::unique_ptr< CVGreeter::Stub> CVGreeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CVGreeter::Stub> stub(new CVGreeter::Stub(channel, options));
  return stub;
}

CVGreeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CVCommunication_(CVGreeter_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CVGreeter::Stub::CVCommunication(::grpc::ClientContext* context, const ::Client2Verifier::CVRequest& request, ::Client2Verifier::CVReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Client2Verifier::CVRequest, ::Client2Verifier::CVReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CVCommunication_, context, request, response);
}

void CVGreeter::Stub::async::CVCommunication(::grpc::ClientContext* context, const ::Client2Verifier::CVRequest* request, ::Client2Verifier::CVReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Client2Verifier::CVRequest, ::Client2Verifier::CVReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CVCommunication_, context, request, response, std::move(f));
}

void CVGreeter::Stub::async::CVCommunication(::grpc::ClientContext* context, const ::Client2Verifier::CVRequest* request, ::Client2Verifier::CVReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CVCommunication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Client2Verifier::CVReply>* CVGreeter::Stub::PrepareAsyncCVCommunicationRaw(::grpc::ClientContext* context, const ::Client2Verifier::CVRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Client2Verifier::CVReply, ::Client2Verifier::CVRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CVCommunication_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Client2Verifier::CVReply>* CVGreeter::Stub::AsyncCVCommunicationRaw(::grpc::ClientContext* context, const ::Client2Verifier::CVRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCVCommunicationRaw(context, request, cq);
  result->StartCall();
  return result;
}

CVGreeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CVGreeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CVGreeter::Service, ::Client2Verifier::CVRequest, ::Client2Verifier::CVReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CVGreeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Client2Verifier::CVRequest* req,
             ::Client2Verifier::CVReply* resp) {
               return service->CVCommunication(ctx, req, resp);
             }, this)));
}

CVGreeter::Service::~Service() {
}

::grpc::Status CVGreeter::Service::CVCommunication(::grpc::ServerContext* context, const ::Client2Verifier::CVRequest* request, ::Client2Verifier::CVReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Client2Verifier


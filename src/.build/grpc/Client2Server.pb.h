// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client2Server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client2Server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Client2Server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Client2Server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Client2Server_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client2Server_2eproto;
namespace Client2Server {
class CSReply;
struct CSReplyDefaultTypeInternal;
extern CSReplyDefaultTypeInternal _CSReply_default_instance_;
class CSRequest;
struct CSRequestDefaultTypeInternal;
extern CSRequestDefaultTypeInternal _CSRequest_default_instance_;
}  // namespace Client2Server
PROTOBUF_NAMESPACE_OPEN
template<> ::Client2Server::CSReply* Arena::CreateMaybeMessage<::Client2Server::CSReply>(Arena*);
template<> ::Client2Server::CSRequest* Arena::CreateMaybeMessage<::Client2Server::CSRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Client2Server {

// ===================================================================

class CSRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Client2Server.CSRequest) */ {
 public:
  inline CSRequest() : CSRequest(nullptr) {}
  ~CSRequest() override;
  explicit PROTOBUF_CONSTEXPR CSRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRequest(const CSRequest& from);
  CSRequest(CSRequest&& from) noexcept
    : CSRequest() {
    *this = ::std::move(from);
  }

  inline CSRequest& operator=(const CSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRequest& operator=(CSRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRequest* internal_default_instance() {
    return reinterpret_cast<const CSRequest*>(
               &_CSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSRequest& a, CSRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRequest& from) {
    CSRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Client2Server.CSRequest";
  }
  protected:
  explicit CSRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
  };
  // string pk = 1;
  void clear_pk();
  const std::string& pk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pk();
  PROTOBUF_NODISCARD std::string* release_pk();
  void set_allocated_pk(std::string* pk);
  private:
  const std::string& _internal_pk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pk(const std::string& value);
  std::string* _internal_mutable_pk();
  public:

  // string latitude = 2;
  void clear_latitude();
  const std::string& latitude() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latitude(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latitude();
  PROTOBUF_NODISCARD std::string* release_latitude();
  void set_allocated_latitude(std::string* latitude);
  private:
  const std::string& _internal_latitude() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latitude(const std::string& value);
  std::string* _internal_mutable_latitude();
  public:

  // string longitude = 3;
  void clear_longitude();
  const std::string& longitude() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_longitude(ArgT0&& arg0, ArgT... args);
  std::string* mutable_longitude();
  PROTOBUF_NODISCARD std::string* release_longitude();
  void set_allocated_longitude(std::string* longitude);
  private:
  const std::string& _internal_longitude() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_longitude(const std::string& value);
  std::string* _internal_mutable_longitude();
  public:

  // @@protoc_insertion_point(class_scope:Client2Server.CSRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latitude_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client2Server_2eproto;
};
// -------------------------------------------------------------------

class CSReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Client2Server.CSReply) */ {
 public:
  inline CSReply() : CSReply(nullptr) {}
  ~CSReply() override;
  explicit PROTOBUF_CONSTEXPR CSReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReply(const CSReply& from);
  CSReply(CSReply&& from) noexcept
    : CSReply() {
    *this = ::std::move(from);
  }

  inline CSReply& operator=(const CSReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReply& operator=(CSReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReply* internal_default_instance() {
    return reinterpret_cast<const CSReply*>(
               &_CSReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSReply& a, CSReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReply& from) {
    CSReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Client2Server.CSReply";
  }
  protected:
  explicit CSReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string rand = 1;
  void clear_rand();
  const std::string& rand() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rand(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rand();
  PROTOBUF_NODISCARD std::string* release_rand();
  void set_allocated_rand(std::string* rand);
  private:
  const std::string& _internal_rand() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rand(const std::string& value);
  std::string* _internal_mutable_rand();
  public:

  // string time = 2;
  void clear_time();
  const std::string& time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // @@protoc_insertion_point(class_scope:Client2Server.CSReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rand_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client2Server_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSRequest

// string pk = 1;
inline void CSRequest::clear_pk() {
  _impl_.pk_.ClearToEmpty();
}
inline const std::string& CSRequest::pk() const {
  // @@protoc_insertion_point(field_get:Client2Server.CSRequest.pk)
  return _internal_pk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSRequest::set_pk(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pk_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client2Server.CSRequest.pk)
}
inline std::string* CSRequest::mutable_pk() {
  std::string* _s = _internal_mutable_pk();
  // @@protoc_insertion_point(field_mutable:Client2Server.CSRequest.pk)
  return _s;
}
inline const std::string& CSRequest::_internal_pk() const {
  return _impl_.pk_.Get();
}
inline void CSRequest::_internal_set_pk(const std::string& value) {
  
  _impl_.pk_.Set(value, GetArenaForAllocation());
}
inline std::string* CSRequest::_internal_mutable_pk() {
  
  return _impl_.pk_.Mutable(GetArenaForAllocation());
}
inline std::string* CSRequest::release_pk() {
  // @@protoc_insertion_point(field_release:Client2Server.CSRequest.pk)
  return _impl_.pk_.Release();
}
inline void CSRequest::set_allocated_pk(std::string* pk) {
  if (pk != nullptr) {
    
  } else {
    
  }
  _impl_.pk_.SetAllocated(pk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pk_.IsDefault()) {
    _impl_.pk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client2Server.CSRequest.pk)
}

// string latitude = 2;
inline void CSRequest::clear_latitude() {
  _impl_.latitude_.ClearToEmpty();
}
inline const std::string& CSRequest::latitude() const {
  // @@protoc_insertion_point(field_get:Client2Server.CSRequest.latitude)
  return _internal_latitude();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSRequest::set_latitude(ArgT0&& arg0, ArgT... args) {
 
 _impl_.latitude_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client2Server.CSRequest.latitude)
}
inline std::string* CSRequest::mutable_latitude() {
  std::string* _s = _internal_mutable_latitude();
  // @@protoc_insertion_point(field_mutable:Client2Server.CSRequest.latitude)
  return _s;
}
inline const std::string& CSRequest::_internal_latitude() const {
  return _impl_.latitude_.Get();
}
inline void CSRequest::_internal_set_latitude(const std::string& value) {
  
  _impl_.latitude_.Set(value, GetArenaForAllocation());
}
inline std::string* CSRequest::_internal_mutable_latitude() {
  
  return _impl_.latitude_.Mutable(GetArenaForAllocation());
}
inline std::string* CSRequest::release_latitude() {
  // @@protoc_insertion_point(field_release:Client2Server.CSRequest.latitude)
  return _impl_.latitude_.Release();
}
inline void CSRequest::set_allocated_latitude(std::string* latitude) {
  if (latitude != nullptr) {
    
  } else {
    
  }
  _impl_.latitude_.SetAllocated(latitude, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.latitude_.IsDefault()) {
    _impl_.latitude_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client2Server.CSRequest.latitude)
}

// string longitude = 3;
inline void CSRequest::clear_longitude() {
  _impl_.longitude_.ClearToEmpty();
}
inline const std::string& CSRequest::longitude() const {
  // @@protoc_insertion_point(field_get:Client2Server.CSRequest.longitude)
  return _internal_longitude();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSRequest::set_longitude(ArgT0&& arg0, ArgT... args) {
 
 _impl_.longitude_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client2Server.CSRequest.longitude)
}
inline std::string* CSRequest::mutable_longitude() {
  std::string* _s = _internal_mutable_longitude();
  // @@protoc_insertion_point(field_mutable:Client2Server.CSRequest.longitude)
  return _s;
}
inline const std::string& CSRequest::_internal_longitude() const {
  return _impl_.longitude_.Get();
}
inline void CSRequest::_internal_set_longitude(const std::string& value) {
  
  _impl_.longitude_.Set(value, GetArenaForAllocation());
}
inline std::string* CSRequest::_internal_mutable_longitude() {
  
  return _impl_.longitude_.Mutable(GetArenaForAllocation());
}
inline std::string* CSRequest::release_longitude() {
  // @@protoc_insertion_point(field_release:Client2Server.CSRequest.longitude)
  return _impl_.longitude_.Release();
}
inline void CSRequest::set_allocated_longitude(std::string* longitude) {
  if (longitude != nullptr) {
    
  } else {
    
  }
  _impl_.longitude_.SetAllocated(longitude, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.longitude_.IsDefault()) {
    _impl_.longitude_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client2Server.CSRequest.longitude)
}

// -------------------------------------------------------------------

// CSReply

// string rand = 1;
inline void CSReply::clear_rand() {
  _impl_.rand_.ClearToEmpty();
}
inline const std::string& CSReply::rand() const {
  // @@protoc_insertion_point(field_get:Client2Server.CSReply.rand)
  return _internal_rand();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReply::set_rand(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rand_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client2Server.CSReply.rand)
}
inline std::string* CSReply::mutable_rand() {
  std::string* _s = _internal_mutable_rand();
  // @@protoc_insertion_point(field_mutable:Client2Server.CSReply.rand)
  return _s;
}
inline const std::string& CSReply::_internal_rand() const {
  return _impl_.rand_.Get();
}
inline void CSReply::_internal_set_rand(const std::string& value) {
  
  _impl_.rand_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReply::_internal_mutable_rand() {
  
  return _impl_.rand_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReply::release_rand() {
  // @@protoc_insertion_point(field_release:Client2Server.CSReply.rand)
  return _impl_.rand_.Release();
}
inline void CSReply::set_allocated_rand(std::string* rand) {
  if (rand != nullptr) {
    
  } else {
    
  }
  _impl_.rand_.SetAllocated(rand, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rand_.IsDefault()) {
    _impl_.rand_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client2Server.CSReply.rand)
}

// string time = 2;
inline void CSReply::clear_time() {
  _impl_.time_.ClearToEmpty();
}
inline const std::string& CSReply::time() const {
  // @@protoc_insertion_point(field_get:Client2Server.CSReply.time)
  return _internal_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReply::set_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Client2Server.CSReply.time)
}
inline std::string* CSReply::mutable_time() {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:Client2Server.CSReply.time)
  return _s;
}
inline const std::string& CSReply::_internal_time() const {
  return _impl_.time_.Get();
}
inline void CSReply::_internal_set_time(const std::string& value) {
  
  _impl_.time_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReply::_internal_mutable_time() {
  
  return _impl_.time_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReply::release_time() {
  // @@protoc_insertion_point(field_release:Client2Server.CSReply.time)
  return _impl_.time_.Release();
}
inline void CSReply::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  _impl_.time_.SetAllocated(time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_.IsDefault()) {
    _impl_.time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Client2Server.CSReply.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client2Server

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Client2Server_2eproto
